# -*- coding: utf-8 -*-
"""streamlit_fp-DataScience_Ilyasalhasim.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IV55I_lieMIvYxciSsTObCIoORtC7Ydn
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

import streamlit as st
import numpy as np
import pandas as pd
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Step 1: Load the dataset
df = pd.read_csv('/content/drive/MyDrive/kuliah/semester 6/Data Science/final projek/dataset/recruitment_data.csv')

# Assuming your CSV has columns relevant to the Iris dataset structure,
# replace 'feature_column_1', 'feature_column_2', 'feature_column_3', 'feature_column_4'
# with the actual names of your feature columns and 'target_column' with your target column.
# You might need to adjust this based on your specific dataset.
X = df.drop('HiringDecision', axis=1)
y = df['HiringDecision'].values # Labels (assuming 'HiringDecision' is your target column)


# Step 2: Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 3: Initialize and train the svm classifier
svm = SVC()
svm.fit(X_train, y_train)

# Step 4: Streamlit layout and user input for features
st.title("Recruitment Data Prediction")
st.write("This app predicts if a candidate will be hired based on their features.")

# Input fields for the user to enter candidate features
age = st.number_input('Age', min_value=0, max_value=100, value=25, step=1)
experience = st.number_input('Experience (years)', min_value=0, max_value=50, value=5, step=1)
education = st.number_input('Education Level (e.g., 1 for Bachelor, 2 for Master, etc.)', min_value=0, max_value=5, value=1, step=1)
it_skills = st.number_input('IT Skills Score (e.g., 1-5)', min_value=1, max_value=5, value=3, step=1)
interview_performance = st.number_input('Interview Performance Score (e.g., 1-5)', min_value=1, max_value=5, value=3, step=1)
recruitment_strategy = st.number_input('Recruitment Strategy (e.g., 1 for A, 2 for B, etc.)', min_value=1, max_value=3, value=1, step=1)


# Step 5: Make prediction when the user presses the "Predict" button
if st.button('Predict Hired Status'):
    input_data = np.array([[age, experience, education, it_skills, interview_performance, recruitment_strategy]])

    # Make prediction
    prediction = svm.predict(input_data)

    # Display the predicted status
    predicted_status = "Hired" if prediction[0] == 1 else "Not Hired" # Assuming 1 means hired and 0 means not hired
    st.write(f"The predicted status is: {predicted_status}")

    # Evaluate and display model accuracy
    y_pred = svm.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    st.write(f"Model Accuracy: {accuracy * 100:.2f}%")