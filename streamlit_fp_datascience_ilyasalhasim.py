# -*- coding: utf-8 -*-
"""streamlit_fp-DataScience_Ilyasalhasim.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IV55I_lieMIvYxciSsTObCIoORtC7Ydn
"""

# prompt: buatkan saya program untuk demo pada streamlit

import streamlit as st
import pandas as pd
import joblib
import numpy as np

# Define the path to the saved model
model_load_path = '/content/drive/MyDrive/kuliah/semester 6/Data Science/final projek/program/svm_hiring_model.pkl' # Make sure this path is correct

# Load the trained model
try:
    model = joblib.load(model_load_path)
    st.success("Model loaded successfully!")
except FileNotFoundError:
    st.error("Error: Model file not found. Please check the path.")
    st.stop() # Stop the app if the model file isn't found

# Function to preprocess input data
def preprocess_input(input_data):
    # Ensure the order and names of columns match the training data
    # Assuming the training data columns were in the same order as the original dataframe
    # You might need to explicitly define the order if it was changed during training
    numerical_cols = ['YearsOfExperience', 'Salary', 'InterviewScore', 'CommunicationSkill', 'ResumeScore', 'LogicalSkill', 'PresentationSkill', 'PastPerformance', 'YearsAtCompany']
    processed_data = pd.DataFrame([input_data], columns=numerical_cols)

    # Apply the same MinMax scaling as during training
    # Note: Ideally, you should save and load the scaler as well.
    # For this demo, we'll create a new scaler, but this is not best practice
    # for production. In production, always use the same scaler fitted on the training data.
    from sklearn.preprocessing import MinMaxScaler
    scaler = MinMaxScaler()
    # This scaler needs to be fitted on the training data.
    # Since we don't have the original scaler here, we'll fit on dummy data.
    # REPLACE THIS WITH LOADING THE ACTUAL FITTED SCALER.
    dummy_data = pd.DataFrame(np.random.rand(100, len(numerical_cols)), columns=numerical_cols)
    scaler.fit(dummy_data) # This is just for the demo, not correct for deployment
    # Fit on training data before deployment and load the scaler
    # scaler = joblib.load('/path/to/saved/scaler.pkl')

    processed_data[numerical_cols] = scaler.transform(processed_data[numerical_cols])

    return processed_data

# Streamlit App
st.title("Hiring Decision Prediction App")
st.write("Enter the candidate's details to predict the hiring decision.")

# Input fields for candidate features
years_experience = st.number_input("Years of Experience", min_value=0.0, max_value=50.0, value=5.0, step=0.1)
salary = st.number_input("Salary", min_value=0.0, max_value=200000.0, value=60000.0, step=1000.0)
interview_score = st.number_input("Interview Score", min_value=0.0, max_value=10.0, value=7.0, step=0.1)
communication_skill = st.number_input("Communication Skill (1-10)", min_value=1.0, max_value=10.0, value=7.0, step=0.1)
resume_score = st.number_input("Resume Score (1-10)", min_value=1.0, max_value=10.0, value=7.0, step=0.1)
logical_skill = st.number_input("Logical Skill (1-10)", min_value=1.0, max_value=10.0, value=7.0, step=0.1)
presentation_skill = st.number_input("Presentation Skill (1-10)", min_value=1.0, max_value=10.0, value=7.0, step=0.1)
past_performance = st.number_input("Past Performance (1-10)", min_value=1.0, max_value=10.0, value=7.0, step=0.1)
years_at_company = st.number_input("Years at Previous Company", min_value=0.0, max_value=30.0, value=3.0, step=0.1)


# Create a dictionary from the input values
input_data = {
    'YearsOfExperience': years_experience,
    'Salary': salary,
    'InterviewScore': interview_score,
    'CommunicationSkill': communication_skill,
    'ResumeScore': resume_score,
    'LogicalSkill': logical_skill,
    'PresentationSkill': presentation_skill,
    'PastPerformance': past_performance,
    'YearsAtCompany': years_at_company
}

# Prediction button
if st.button("Predict Hiring Decision"):
    # Preprocess the input data
    processed_input = preprocess_input(input_data)

    # Make prediction
    prediction = model.predict(processed_input)

    # Display the prediction
    st.subheader("Prediction:")
    if prediction[0] == 'Hired':
        st.success("The candidate is predicted to be HIRED.")
    else:
        st.error("The candidate is predicted to be NOT HIRED.")

st.sidebar.header("About")
st.sidebar.write("""
This app uses a trained Support Vector Machine (SVM) model to predict
whether a candidate will be hired based on various recruitment factors.
The model was trained on a dataset from Kaggle.
""")

# Instructions on how to run the app
st.sidebar.header("How to Run")
st.sidebar.write("""
1. Make sure you have Streamlit installed (`pip install streamlit`).
2. Save this code as a Python file (e.g., `app.py`).
3. Ensure the model file (`svm_hiring_model.pkl`) is in the specified path.
4. Run the app from your terminal using: `streamlit run app.py`
""")